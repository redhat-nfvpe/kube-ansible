---
# Setup variables
- include: variables.yml

- import_tasks: system_setup.yml

- name: Template kube RPM repo
  template:
    src: kubernetes.repo.j2
    dest: /etc/yum.repos.d/kubernetes.repo
  when: not artifacts_install

- name: Default kube version fact
  set_fact:
    kube_version_parameter: ""

- name: Set kube version fact to specific version when specified
  set_fact:
    kube_version_parameter: "-{{ kube_version }}"
  when: kube_version != "latest" and not artifacts_install

- name: Get Kubernetes version when doing an artifacts-based installation
  block:
    - name: get contents
      command: tar xfO {{ artifacts_sync_path }}/kube-proxy.tar manifest.json
      register: raw_manifest
      tags:
        - skip_ansible_lint  # needs to use tar to unpack and return file contents

    - name: Set contents of raw manifest.json from kube-proxy container archive
      set_fact:
        manifest: "{{ raw_manifest.stdout|from_json }}"

    - name: Get version of kube-proxy container archive from manifest variable
      set_fact:
        kube_version: "{{ manifest.0.RepoTags.0.split(':')[1] | replace('_', '+') }}"
  when: artifacts_install

- name: Install required packages for Kubernetes deployment
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - kubectl{{ kube_version_parameter }}
    - kubelet{{ kube_version_parameter }}
    - kubeadm{{ kube_version_parameter }}
    - kubernetes-cni
  when: not artifacts_install


# TODO: only install when packages are not already installed
- name: Install required packages from artifacts for Kubernetes deployment
  block:
    - name: Install RPMs for Kubernetes from artifacts
      yum:
        name: "{{ item }}"
        state: present
      with_items:
        - "{{ artifacts_sync_path }}/kubeadm-x86_64.rpm"
        - "{{ artifacts_sync_path }}/kubectl-x86_64.rpm"
        - "{{ artifacts_sync_path }}/kubelet-x86_64.rpm"
        - "{{ artifacts_sync_path }}/kubernetes-cni-x86_64.rpm"

    - name: Get list of container image archives
      find:
        paths: "{{ artifacts_sync_path }}"
        patterns: "*.tar"
      register: container_image_archives

    - name: Load container images
      command: |
        docker load -i {{ item.path }}
      with_items: "{{ container_image_archives.files }}"

    - name: Retag the container images
      shell: >
        docker images --format "docker tag {{'{{'}}.Repository{{'}}'}}:{{'{{'}}.Tag{{'}}'}} {{'{{'}}.Repository{{'}}'}}-amd64:{{'{{'}}.Tag{{'}}'}}" | sh

  when: artifacts_install

# TODO: only load images when not already imported


- name: Install CNI plugins 0.6.0 for ipv6
  shell: |
    ARCHIVE=cni-plugins-amd64-v0.6.0.tgz
    mkdir -p /opt/cni/bin
    cd /opt/cni/bin
    rm -f *
    sudo curl -SLO https://github.com/containernetworking/plugins/releases/download/v0.6.0/$ARCHIVE
    if sudo tar -xzvf $ARCHIVE; then
      sudo rm $ARCHIVE
    fi
  when: ipv6_enabled

- name: Download and install kokonet-cni binary
  block:
    - name: Get the latest version
      shell: >
        curl -ILs -o /dev/null -w %{url_effective} https://bintray.com/s1061123/generic/kokonet/_latestVersion  | sed -e 's/^.*kokonet\/snapshot-\(.*\)/\1/'
      register: kokonet_cni_latest_ver

    - name: Download the latest binary
      get_url:
        url: https://dl.bintray.com/s1061123/generic/kokonet-cni_linux_amd64-{{kokonet_cni_latest_ver.stdout}}.tar.gz
        dest: /home/centos/koknet-cni_linux_amd64.tgz

    - name: Extract kokonet-cni plugin
      unarchive:
        src: /home/centos/koknet-cni_linux_amd64.tgz
        dest: /home/centos
        remote_src: yes

    - name: Put kokonet-cni plugin
      become: true
      become_user: root
      copy:
        src: /home/centos/kokonet-cni_linux_amd64/kokonet-cni
        dest: /opt/cni/bin
        remote_src: yes
        mode: 0755
  when: pod_network_type == 'kokonet-bridge'

- name: Optionally include playbook for binary install
  include: binary_install.yml
  when: binary_install

- name: Include kube 1.6.0 work-around
  include: kube-16-workaround.yml
  when: kube_16_workaround

- name: Remove default kubeadm.conf ExecStart
  lineinfile:
    dest: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
    regexp: 'KUBELET_EXTRA_ARGS$'
    state: absent

- name: Add custom kubeadm.conf ExecStart
  lineinfile:
    dest: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
    regexp: 'systemd$'
    line: 'ExecStart=/usr/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_SYSTEM_PODS_ARGS $KUBELET_NETWORK_ARGS $KUBELET_DNS_ARGS $KUBELET_AUTHZ_ARGS $KUBELET_EXTRA_ARGS --cgroup-driver=systemd'
  notify: "restart kubelet"

- name: Change cluster dns ip in kubeadm.conf for ipv6
  lineinfile:
    dest: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
    regexp: 'cluster-dns'
    line: 'Environment="KUBELET_DNS_ARGS=--cluster-dns=fd00:1234::10 --cluster-domain=cluster.local"'
  notify: "restart kubelet"
  when: ipv6_enabled

- name: make sure kubelet is started and enabled
  service:
    name: "kubelet"
    state: started
    enabled: yes
