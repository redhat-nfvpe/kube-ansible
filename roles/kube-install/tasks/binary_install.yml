---

- name: Check for download complete semaphor
  stat:
    path: "{{ kubectl_home }}/.kube-binary-download-complete"
  register: download_complete_semaphor

- name: Delete existing binaries when necessary
  file:
    path: "{{ item.path }}"
    state: absent
  with_items:
    - path: /usr/bin/kubelet
      url_is_set: "{{ binary_kubelet_url is defined }}"
    - path: /usr/bin/kubectl
      url_is_set: "{{ binary_kubectl_url is defined }}"
    - path: /usr/bin/kubeadm
      url_is_set: "{{ binary_kubeadm_url is defined }}"
  when: >
    item.url_is_set and
    (download_complete_semaphor.stat.exists == False or binary_install_force_redownload)

- name: Default the proxy environment
  set_fact:
    use_proxy: ""

- name: Set proxy environment
  set_fact:
    use_proxy: "export http_proxy={{ http_proxy }} && "
  when: http_proxy != ""

- name: Default the proxy environment
  set_fact:
    use_https_proxy: ""

- name: Set proxy environment
  set_fact:
    use_https_proxy: "export https_proxy={{ https_proxy }} && "
  when: https_proxy != ""


- name: Download kubelet/kubectl/kubeadm
  shell: >
    {{use_proxy}}{{use_https_proxy}}curl -L {{ item.use_url }} -o {{ item.to_path }}
  # get_url:
  #   url: "{{ item.use_url }}"
  #   dest: "{{ item.to_path }}"
  #   mode: 0755
  #   force: "{{ binary_install_force_redownload }}"
  when: binary_kubelet_url is defined
  with_items:
    - use_url: "{{ binary_kubelet_url }}"
      to_path: "/usr/bin/kubelet"
    - use_url: "{{ binary_kubeadm_url }}"
      to_path: "/usr/bin/kubeadm"
    - use_url: "{{ binary_kubectl_url }}"
      to_path: "/usr/bin/kubectl"

- name: Set binary path perms
  file:
    path: "{{ item.path }}"
    mode: 0755
  with_items:
    - path: /usr/bin/kubelet
    - path: /usr/bin/kubectl
    - path: /usr/bin/kubeadm
  when: >
    binary_kubelet_url is defined

- name: Mark download complete
  file:
    path: "{{ kubectl_home }}/.kube-binary-download-complete"
    state: directory
