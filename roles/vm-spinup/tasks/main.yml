---

- name: Template the SSH spinup script
  template:
    src: spinup.sh.j2
    dest: /root/spinup.sh
    mode: 0755

- name: Template the virtual machine "get IP" script
  template:
    src: getip.sh.j2
    dest: /root/getip.sh
    mode: 0755

- name: Get the virsh list
  shell: >
    virsh list
  register: virsh_list

# - name: Show virsh list
#   debug: "msg={{ virsh_list.stdout }} - {{ virtual_machines }}"

- name: Run spinup for each host that doesn't exist
  shell: >
    /root/spinup.sh {{ item.name }}
  when: "item.name not in virsh_list.stdout"
  with_items: "{{ virtual_machines }}"

# - name: Get IP Addresses for all VMs
#   shell: >
#     grep -B1 $(virsh dumpxml {{ item }} | awk -F\' '/mac address/ {print $2}') /var/lib/libvirt/dnsmasq/{{ bridge_name }}.status | head -n 1 | awk '{print $2}' | sed -e s/\"//g -e s/,//
#   register: vm_ip_addresses
#   with_items: "{{ virtual_machines }}"
#   when: not bridge_networking

- name: Get IP Addresses for all VMs
  shell: >
    cat /tmp/{{ item.name }}.ip.txt
  register: vm_ip_addresses
  with_items: "{{ virtual_machines }}"
  # when: bridge_networking

- name: Populate dictionary of IPs
  set_fact:
    vm_ips_dict: "{{ vm_ips_dict|default({}) | combine( {item.item.name: item.stdout} ) }}"
  with_items: "{{ vm_ip_addresses.results }}"

- name: Here are the IPs of the VMs
  debug: "msg={{ vm_ips_dict }}"

- name: Flush out /etc/hosts, always (for simplicity)
  lineinfile:
    dest: /etc/hosts
    state: absent
    regexp: '{{ item.key }}'
  with_dict: "{{ vm_ips_dict }}"

- name: Build out /etc/hosts for each VM
  lineinfile:
    dest: /etc/hosts
    line: '{{ item.value }} {{ item.key }}'
    regexp: '{{ item.key }}'
  with_dict: "{{ vm_ips_dict }}"

- name: Setup default ssh_proxy_host
  set_fact:
    ssh_proxy_host: "{{ ansible_host }}"
  when: not ssh_proxy_host is defined and ssh_proxy_enabled

- name: Build a local inventory
  template:
    src: vms.local.j2
    dest: inventory/vms.local.generated
  delegate_to: 127.0.0.1
